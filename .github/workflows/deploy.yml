name: Deploy to VPS - MERN Stack

on:
  push:
    branches: [main]

env:
  VPS_IP: ${{ secrets.VPS_IP }}
  VPS_USER: ${{ secrets.VPS_USER }}
  VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
  DEPLOY_DIR: /home/ubuntu/new_hybrid_projects/ride_share
  PM2_APP_NAME: ride_share

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Create environment files from GitHub Secrets
    - name: Create client environment files
      working-directory: ./client
      run: |
        echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > .env.production

    - name: Create server environment file
      working-directory: ./server
      run: |
        echo "NODE_ENV=production" > .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
        echo "JWT_COOKIE_EXPIRES_IN=${{ secrets.JWT_COOKIE_EXPIRES_IN }}" >> .env
        echo "UPLOAD_LIMIT=${{ secrets.UPLOAD_LIMIT }}" >> .env
        echo "RATE_LIMIT_WINDOW=${{ secrets.RATE_LIMIT_WINDOW }}" >> .env
        echo "RATE_LIMIT_MAX=${{ secrets.RATE_LIMIT_MAX }}" >> .env
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
        echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
        echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env

    # Frontend build (modified to output to root)
    - name: Build React frontend
      working-directory: ./client
      run: |
        npm ci
        npm run build -- --outDir=../dist

    # Backend preparation
    - name: Prepare backend
      working-directory: ./server
      run: |
        npm ci --omit=dev

    # Create deployment package (modified for root dist)
    - name: Create deployment structure
      run: |
        mkdir -p deploy/client
        mkdir -p deploy/backend
        
        # Copy frontend build from root dist
        cp -r dist/* deploy/client/
        
        # Copy backend files (excluding node_modules)
        cp -r server/* deploy/backend/
        rm -rf deploy/backend/node_modules

    # Compress for transfer
    - name: Compress deployment package
      run: tar -czvf ride_share.tar.gz -C deploy .

    # Deploy to VPS
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.VPS_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Transfer files to VPS
      run: |
        scp -o StrictHostKeyChecking=no ride_share.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_IP }}:/tmp/

    - name: SSH and deploy on VPS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_IP }} << EOF
        # Create directory if not exists
        mkdir -p ${{ env.DEPLOY_DIR }}
        
        # Extract files
        tar -xzvf /tmp/ride_share.tar.gz -C ${{ env.DEPLOY_DIR }}

        # Ensure uploads directory exists with proper permissions
        mkdir -p ${{ env.DEPLOY_DIR }}/backend/uploads
        chmod -R 755 ${{ env.DEPLOY_DIR }}/backend/uploads

        # Install backend dependencies
        cd ${{ env.DEPLOY_DIR }}/backend
        npm install --omit=dev

        # Restart application with PM2
        pm2 delete ${{ env.PM2_APP_NAME }} || true
        pm2 start server.js --name "${{ env.PM2_APP_NAME }}"
        pm2 save
        EOF